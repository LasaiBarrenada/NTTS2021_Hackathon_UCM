dplyr::filter(year==2019)
} else {
dt_f<-dt_f%>%
dplyr::filter(year==2020)
}
# Filtro mes
if (month==1){
dt_f<-dt_f %>% dplyr::filter(month==1)
} else if (month==2){
dt_f<-dt_f %>% dplyr::filter(month==2)
} else if (month==3){
dt_f<-dt_f %>% dplyr::filter(month==3)
} else if (month==4){
dt_f<-dt_f %>% dplyr::filter(month==4)
} else if (month==5){
dt_f<-dt_f %>% dplyr::filter(month==5)
} else if (month==6){
dt_f<-dt_f %>% dplyr::filter(month==6)
} else if (month==7){
dt_f<-dt_f %>% dplyr::filter(month==7)
} else if (month==8){
dt_f<-dt_f %>% dplyr::filter(month==8)
} else if (month==9){
dt_f<-dt_f %>% dplyr::filter(month==9)
} else if (month==10){
dt_f<-dt_f %>% dplyr::filter(month==10)
} else if (month==11){
dt_f<-dt_f %>% dplyr::filter(month==11)
} else {
dt_f<-dt_f %>% dplyr::filter(month==12)
}
# Filtro "category"
if (product=='bandages'){
dt_f<-dt_f %>% dplyr::filter(category=='bandages')
} else if (product=='COVID19_t'){
dt_f<-dt_f %>% dplyr::filter(category=='COVID19_t')
} else if (product=='disinfectans'){
dt_f<-dt_f %>% dplyr::filter(category=='disinfectans')
} else if (product=='facemasksFFP2'){
dt_f<-dt_f %>% dplyr::filter(category=='facemasksFFP2')
} else if (product=='gargamets'){
dt_f<-dt_f %>% dplyr::filter(category=='gargamets')
} else if (product=='gloves'){
dt_f<-dt_f %>% dplyr::filter(category=='gloves')
} else if (product=='head_caps'){
dt_f<-dt_f %>% dplyr::filter(category=='head_caps')
} else if (product=='medical_dev'){
dt_f<-dt_f %>% dplyr::filter(category=='medical_dev')
} else if (product=='mediccines'){
dt_f<-dt_f %>% dplyr::filter(category=='mediccines')
} else if (product=='other_acc'){
dt_f<-dt_f %>% dplyr::filter(category=='other_acc')
} else  if (product=='other_med'){
dt_f<-dt_f %>% dplyr::filter(category=='other_med')
} else if (product=='oxigen_therapy'){
dt_f<-dt_f %>% dplyr::filter(category=='oxigen_therapy')
} else if (product=='sterile_tubes'){
dt_f<-dt_f %>% dplyr::filter(category=='sterile_tubes')
} else if (product=='sterilizers'){
dt_f<-dt_f %>% dplyr::filter(category=='sterilizers')
} else if (product=='syringes'){
dt_f<-dt_f %>% dplyr::filter(category=='syringes')
} else if (product=='thermometers'){
dt_f<-dt_f %>% dplyr::filter(category=='thermometers')
} else if (product=='surgical_masks'){
dt_f<-dt_f %>% dplyr::filter(category=='surgical_masks')
} else {
dt_f<-dt_f %>% dplyr::filter(category=='vehicles')
}
dt_f <- dt_f %>%
group_by(DECLARANT_ISO, PARTNER_ISO) %>%
summarise(value = sum(VALUE_IN_EUROS),
par_cont=first(par_cont)) %>%
ungroup()%>% na.omit()
# Filtro continente del partner
if (continent=='Europe'){
# Filtrado y fusión con las coordenadas de los centroides
dt_f<- dt_f%>%
dplyr::filter(par_cont=='Europe') %>%
dplyr::filter(DECLARANT_ISO==declarant_iso) %>%
merge(centroids,by.x='DECLARANT_ISO',by.y = 'country')%>%
merge(centroids,by.x='PARTNER_ISO',by.y = 'country')
# Mapa del mundo
map("world", fill=T, col="grey8", bg="grey15")
# Punto del declarante
points(dt_f$longitude.x,dt_f$latitude.x, pch=3, cex=0.1, col='yellow')
# Puntos de los partners
points(dt_f$longitude.y,dt_f$latitude.y, pch=3, cex=0.1, col='yellow')
# Lineas
for (i in (1:nrow(dt_f)[1])) {
inter <- gcIntermediate(c(dt_f$longitude.x[1],dt_f$latitude.x[1]), c(dt_f$longitude.y[i], dt_f$latitude.y[i]), n=200)
lines(inter, lwd=0.1, col="turquoise2")
}
} else if (continent=='Americas'){
dt_f<- dt_f%>%
dplyr::filter(par_cont=='Americas') %>%
dplyr::filter(DECLARANT_ISO==declarant_iso) %>%
merge(centroids,by.x='DECLARANT_ISO',by.y = 'country')%>%
merge(centroids,by.x='PARTNER_ISO',by.y = 'country')
map("world", fill=T, col='grey8', bg="grey15")
points(dt_f$longitude.x,dt_f$latitude.x, pch=3, cex=0.1, col='yellow')
points(dt_f$longitude.y,dt_f$latitude.y, pch=3, cex=0.1, col='yellow')
for (i in (1:nrow(dt_f)[1])) {
inter <- gcIntermediate(c(dt_f$longitude.x[1],dt_f$latitude.x[1]), c(dt_f$longitude.y[i], dt_f$latitude.y[i]), n=200)
lines(inter, lwd=0.1, col="turquoise2")
}
} else if  (continent=='Asia'){
dt_f<- dt_f%>%
dplyr::filter(par_cont=='Asia') %>%
dplyr::filter(DECLARANT_ISO==declarant_iso) %>%
merge(centroids,by.x='DECLARANT_ISO',by.y = 'country')%>%
merge(centroids,by.x='PARTNER_ISO',by.y = 'country')
map("world", fill=T, col='grey8', bg="grey15")
points(dt_f$longitude.x,dt_f$latitude.x, pch=3, cex=0.1, col='yellow')
points(dt_f$longitude.y,dt_f$latitude.y, pch=3, cex=0.1, col='yellow')
for (i in (1:nrow(dt_f)[1])) {
inter <- gcIntermediate(c(dt_f$longitude.x[1],dt_f$latitude.x[1]), c(dt_f$longitude.y[i], dt_f$latitude.y[i]), n=200)
lines(inter, lwd=0.1, col="turquoise2")
}
} else if (continent=='Africa') {
dt_f<- dt_f%>%
dplyr::filter(par_cont=='Africa') %>%
dplyr::filter(DECLARANT_ISO==declarant_iso) %>%
merge(centroids,by.x='DECLARANT_ISO',by.y = 'country')%>%
merge(centroids,by.x='PARTNER_ISO',by.y = 'country')
map("world", fill=T, col='grey8', bg="grey15")
points(dt_f$longitude.x,dt_f$latitude.x, pch=3, cex=0.1, col='yellow')
points(dt_f$longitude.y,dt_f$latitude.y, pch=3, cex=0.1, col='yellow')
for (i in (1:nrow(dt_f)[1])) {
inter <- gcIntermediate(c(dt_f$longitude.x[1],dt_f$latitude.x[1]), c(dt_f$longitude.y[i], dt_f$latitude.y[i]), n=200)
lines(inter, lwd=0.1, col="turquoise2")
}
} else if (continent=='Oceania') {
dt_f<- dt_f%>%
dplyr::filter(par_cont=='Oceania') %>%
dplyr::filter(DECLARANT_ISO==declarant_iso) %>%
merge(centroids,by.x='DECLARANT_ISO',by.y = 'country')%>%
merge(centroids,by.x='PARTNER_ISO',by.y = 'country')
map("world", fill=T, col='grey8', bg="grey15")
points(dt_f$longitude.x,dt_f$latitude.x, pch=3, cex=0.1, col='yellow')
points(dt_f$longitude.y,dt_f$latitude.y, pch=3, cex=0.1, col='yellow')
for (i in (1:nrow(dt_f)[1])) {
inter <- gcIntermediate(c(dt_f$longitude.x[1],dt_f$latitude.x[1]), c(dt_f$longitude.y[i], dt_f$latitude.y[i]), n=200)
lines(inter, lwd=0.1, col="turquoise2")
}
} else {
# Opción todo el mundo
dt_f<- dt_f%>%
dplyr::filter(DECLARANT_ISO==declarant_iso) %>%
merge(centroids,by.x='DECLARANT_ISO',by.y = 'country')%>%
merge(centroids,by.x='PARTNER_ISO',by.y = 'country')
map("world", fill=T, col='grey8', bg="grey15")# Tamaño mapa
points(dt_f$longitude.x,dt_f$latitude.x, pch=3, cex=0.1, col='yellow')
points(dt_f$longitude.y,dt_f$latitude.y, pch=3, cex=0.1, col='yellow')
for (i in (1:nrow(dt_f)[1])) {
inter <- gcIntermediate(c(dt_f$longitude.x[1],dt_f$latitude.x[1]), c(dt_f$longitude.y[i], dt_f$latitude.y[i]), n=200)
lines(inter, lwd=0.1, col="turquoise2")
}
}
p <- recordPlot()
dt<-dt_f%>%dplyr::select(name.y,value)%>%arrange(desc(value))%>%head(10) # Tabla de las díez transas más caras
newlist <- list(p,dt)
return(newlist)
}
source("ui.R")
source("Server.R")
shinyApp(ui,server)
source("CargaDatos.R")
source("Mapa_networkFiltrado.R")
source("Red.Viktor.R")
library(shiny)
library(data.table)
library(treemap)
library(shinythemes)
library(shiny)
library(data.table)
library(treemap)
library(shinythemes)
library(ECharts2Shiny)
library(bit64)
library(dplyr)
library(ggplot2)
library(ggnetwork)
library(intergraph)
library(ggflags)
library(maps)
library(gapminder)
library(countrycode)
library(geosphere)
library(rvest)
setwd("D:/Users/Lasai/Google Drive/Hackathon/CodigoHackathon") #Set your working directory
source("CargaDatos.R")
source("Mapa_networkFiltrado.R")
source("Red.Viktor.R")
source("ui.R")
source("Server.R")
shinyApp(ui,server)
View(dt.2020.filtered)
source("CargaDatos.R")
source("Mapa_networkFiltrado.R")
source("Red.Viktor.R")
source("ui.R")
source("Server.R")
shinyApp(ui,server)
dt.2020.filtered <- read.csv("sample.csv")
View(dt.2020.filtered)
dt.2020.filtered$VALUE_IN_EUROS <-
as.numeric(dt.2020.filtered$VALUE_IN_EUROS)
View(dt.2020.filtered)
title.legend = "Value in million ",
palette = "YlGn"
)
})
output$global_map <-
renderPlot({
mapa_flechas(declarant_iso =countryInput.network(),
flow= tradetypeInput.network(),
continent = "bn",
product= categoryInput.network(),
year = input$period.net,
month = input$month.net)
# mapa_flechas("ES",1,"SDFds","bandages",2020,1)
})
output$red <-renderPlot({
red(tradetypeInput.red(),categoryInput.red(),grouped.dt)
})
output$text <- renderText({
"Viva andalucia libre cojoneh!"
})
}
title.legend = "Value in million  ",
palette = "YlGn"
)
})
output$global_map <-
renderPlot({
mapa_flechas(declarant_iso =countryInput.network(),
flow= tradetypeInput.network(),
continent = "bn",
product= categoryInput.network(),
year = input$period.net,
month = input$month.net)
# mapa_flechas("ES",1,"SDFds","bandages",2020,1)
})
output$red <-renderPlot({
red(tradetypeInput.red(),categoryInput.red(),grouped.dt)
})
output$text <- renderText({
"Viva andalucia libre cojoneh!"
})
}
View(dt.2020.filtered)
source("CargaDatos.R")
source("Mapa_networkFiltrado.R")
source("Red.Viktor.R")
source("ui.R")
source("Server.R")
shinyApp(ui,server)
title.legend = "Value in million EUROS",
palette = "YlOrRd"
)
})
output$threemap_population_category <-
renderPlot({
treemap(
dtf = country()[FLOW == tradetypeInput()],
index = "category",
vSize = "VALUE_IN_EUROS",
vColor = "VALUE_IN_EUROS",
type = "value",
title =  paste(
input$Trade_type,
"of COVID related goods in",
input$country,
"by product"
),
title.legend = "Value in million euros ",
palette = "YlGn"
)
})
output$global_map <-
renderPlot({
mapa_flechas(declarant_iso =countryInput.network(),
flow= tradetypeInput.network(),
continent = "bn",
product= categoryInput.network(),
year = input$period.net,
month = input$month.net)
})
output$red <-renderPlot({
red(tradetypeInput.red(),categoryInput.red(),grouped.dt)
})
}
source("CargaDatos.R")
source("Mapa_networkFiltrado.R")
source("Red.Viktor.R")
source("ui.R")
source("Server.R")
shinyApp(ui,server)
library(shiny)
library(data.table)
library(treemap)
library(shinythemes)
library(shiny)
library(data.table)
library(treemap)
library(shinythemes)
library(ECharts2Shiny)
library(bit64)
library(dplyr)
library(ggplot2)
library(ggnetwork)
library(intergraph)
library(ggflags)
library(maps)
library(gapminder)
library(countrycode)
library(geosphere)
library(rvest)
setwd("D:/Users/Lasai/Google Drive/Hackathon/CodigoHackathon") #Set your working directory
source("CargaDatos.R")
source("Mapa_networkFiltrado.R")
source("Red.Viktor.R")
source("ui.R")
source("Server.R")
shinyApp(ui,server)
library(shiny)
library(data.table)
library(treemap)
library(shinythemes)
library(shiny)
library(data.table)
library(treemap)
library(shinythemes)
library(ECharts2Shiny)
library(bit64)
library(dplyr)
library(ggplot2)
library(ggnetwork)
library(intergraph)
library(ggflags)
library(maps)
library(gapminder)
library(countrycode)
library(geosphere)
library(rvest)
setwd("D:/Users/Lasai/Google Drive/Hackathon/CodigoHackathon") #Set your working directory
source("CargaDatos.R")
source("Mapa_networkFiltrado.R")
source("Red.Viktor.R")
source("ui.R")
source("Server.R")
shinyApp(ui,server)
source("Mapa_networkFiltrado.R")
source("CargaDatos.R")
source("Mapa_networkFiltrado.R")
dt_<- dt.2020.filtered
dt_$dec_cont<-countrycode(dt_$DECLARANT_ISO, origin = 'iso2c', destination = 'continent')
View(dt_)
dt.2020.filtered <- read.csv("dt20192020_filtered.csv")
dt.2020.filtered <- read.csv("dt20192020_filtered.csv")
dt.2020.filtered <- read.csv("dt20192020_filtered.csv", del = ";")
?read.csv
dt.2020.filtered <- read.csv("dt20192020_filtered.csv", sep = ";")
View(dt.2020.filtered)
View(dt.2020.filtered)
dt.2020.filtered <- read.csv("dt20192020_filtered.csv", sep = ",")
dt.2020.filtered <- read.csv("sample.csv")
dt.2020.filtered <- read.csv("dt20192020_filtered.csv")
library(shiny)
library(data.table)
library(treemap)
library(shinythemes)
library(shiny)
library(data.table)
library(treemap)
library(shinythemes)
library(ECharts2Shiny)
library(bit64)
library(dplyr)
library(ggplot2)
library(ggnetwork)
library(intergraph)
library(ggflags)
library(maps)
library(gapminder)
library(countrycode)
library(geosphere)
library(rvest)
setwd("D:/Users/Lasai/Google Drive/Hackathon/CodigoHackathon") #Set your working directory
source("CargaDatos.R")
dt.2020.filtered <- read.csv("sample.csv")
dt.2020.filtered <- as.data.table(dt.2020.filtered)
dt.2020.filtered <- dt.2020.filtered[PERIOD != "202012"]
# columns = c("X","X.1","DECLARANT","PARTNER","PRODUCT_SITC","PRODUCT_CPA2002","PRODUCT_CPA2_1","STAT_REGIME","PRODUCT_SECTION","PRODUCTS_BEC","SUPP_UNIT","QUANTITY_IN_KG","SUP_QUANTITY","year","month")
# drop columns
dt.2020.filtered<- dt.2020.filtered[,  c("X","X.1","DECLARANT","PARTNER", "PRODUCT_SITC", "PRODUCT_CPA2002","PRODUCT_CPA2_1","STAT_REGIME","PRODUCT_SECTION","PRODUCT_BEC","SUPP_UNIT","QUANTITY_IN_KG","SUP_QUANTITY"):=NULL]
dt.2020.filtered
dt.2020.filtered$Date <-
as.Date(paste0(as.character(dt.2020.filtered$PERIOD), '01'), format = '%Y%m%d')
grouped.dt <-
dt.2020.filtered %>% group_by(DECLARANT_ISO,  FLOW, Date, category)
grouped.dt.values <-
grouped.dt %>% summarise(VALUE_IN_EUROS = sum(VALUE_IN_EUROS))
grouped.dt.values <- as.data.table(grouped.dt.values)
EU.27 <-
dt.2020.filtered %>% group_by(FLOW, Date, category) %>% summarise(VALUE_IN_EUROS = sum(VALUE_IN_EUROS))
EU.27$DECLARANT_ISO = "EU-27"
EU.27<- as.data.table(EU.27)
labels.countries <- c(
"Austria",
"Belgium",
"Bulgaria",
"Croatia",
"Cyprus",
"Czechia",
"Denmark",
"Estonia",
"Finland",
"France",
"Germany",
"Greece",
"Hungary",
"Ireland",
"Italy",
"Latvia",
"Lithuania",
"Luxembourg",
"Malta",
"Netherlands",
"Poland",
"Portugal",
"Romania",
"Slovakia",
"Slovenia",
"Spain",
"Sweden",
"EU-27"
)
labels.categories <-
c(
"COVID-19 Tests (kits and instruments)",
"FFP2 Facemasks",
"Surgical masks",
"Protective head caps",
"Gloves (excl. plastic gloves under B4)",
"Protective gargamets excluding head caps and gloves",
"Other protective accessories",
"Disinfectants products",
"Sterilizers",
"Devices for oxigen therapy",
"Medical devices",
"Thermometers",
"Mediccines",
"Bandages",
"Sterile tubes",
"Syringes",
"Other medical",
"Medical vehicles and furniture",
"All Covid products"
)
dt.2020.filtered$VALUE_IN_EUROS <-
as.numeric(dt.2020.filtered$VALUE_IN_EUROS)
source("Mapa_networkFiltrado.R")
source("Red.Viktor.R")
source("ui.R")
source("Server.R")
shinyApp(ui,server)
<p><h3>LASAI BARREÑADA TALEB lbarrena@ucm.es</h3> </p>
<p><h3> RODRIGO GONZALEZ SANTAMARIA rodrgo07@ucm.es </h3></p>
<p><h3>VICTOR PEREZ SEGURA victop01@ucm.es </h3></p>
<h1>Thank you for your attention! </h1>
"
)))
)
source("CargaDatos.R")
source("Mapa_networkFiltrado.R")
source("Red.Viktor.R")
source("ui.R")
source("Server.R")
shinyApp(ui,server)
library(ggflags)
install.packages("ggflags")
devtools::install_github("rensa/ggflags")
library(shiny)
library(data.table)
library(treemap)
library(shinythemes)
library(shiny)
library(data.table)
library(treemap)
library(shinythemes)
library(ECharts2Shiny)
library(bit64)
library(dplyr)
library(ggplot2)
library(ggnetwork)
library(intergraph)
library(ggflags)
library(maps)
library(gapminder)
library(countrycode)
library(geosphere)
library(rvest)
library(ggflags)
setwd("D:/Users/Lasai/Google Drive/Hackathon/CodigoHackathon") #Set your working directory
source("CargaDatos.R")
source("Mapa_networkFiltrado.R")
source("Red.Viktor.R")
source("ui.R")
source("Server.R")
shinyApp(ui,server)
